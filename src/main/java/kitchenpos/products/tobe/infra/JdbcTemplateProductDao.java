package kitchenpos.products.tobe.infra;

import kitchenpos.products.tobe.domain.Product;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class JdbcTemplateProductDao implements ProductDao {
    private static final String TABLE_NAME = "product";
    private static final String KEY_COLUMN_NAME = "id";

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final SimpleJdbcInsert jdbcInsert;

    public JdbcTemplateProductDao(final DataSource dataSource) {
        jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
        jdbcInsert = new SimpleJdbcInsert(dataSource)
                .withTableName(TABLE_NAME)
                .usingGeneratedKeyColumns(KEY_COLUMN_NAME)
        ;
    }

    /**
     * Product 생성
     * @param product
     * @return 생성된 Product
     * @see <a href="https://www.baeldung.com/spring-jdbc-autogenerated-keys">
     *          Obtaining Auto-generated Keys in Spring JDBC
     *     </a>
     */
    @Override
    public Product save(Product product) {
        final SqlParameterSource parameters = new BeanPropertySqlParameterSource(product);
        final Number key = jdbcInsert.executeAndReturnKey(parameters);
        return select(key.longValue());
    }

    @Override
    public List<Product> findAll() {
        return null;
    }

    private Product select(final Long id) {
        final String sql = "SELECT id, name, price FROM product WHERE id = (:id)";
        final SqlParameterSource parameters = new MapSqlParameterSource()
                .addValue("id", id);
        return jdbcTemplate.queryForObject(sql, parameters, (resultSet, rowNumber) -> toEntity(resultSet));
    }

    private Product toEntity(final ResultSet resultSet) throws SQLException {
        final Product entity = new Product(
                resultSet.getString("name"),
                resultSet.getBigDecimal("price")
        );

//        entity.setId(resultSet.getLong(KEY_COLUMN_NAME));

        return entity;
    }
}
